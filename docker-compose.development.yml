services:
  backend:
    image: kalyonekenobe/volonterro:backend
    platform: linux/amd64
    build:
      context: backend
      dockerfile: ./Dockerfile.development
    container_name: volonterro-backend
    networks:
      - volonterro-network
    env_file: ./env/.env.development
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      USER_PASSWORD_SALT_PREFIX: ${USER_PASSWORD_SALT_PREFIX}
      USER_PASSWORD_SALT_SUFFIX: ${USER_PASSWORD_SALT_SUFFIX}
    ports:
      - 8000:${BACKEND_INTERNAL_PORT}
    volumes:
      - ./backend/src:/app/src
      - ./backend/prisma/migrations:/app/prisma/migrations
      - ./backend/prisma/seeders:/app/prisma/seeders
      - ./backend/test:/app/test
    depends_on:
      database:
        condition: service_healthy

  frontend:
    image: kalyonekenobe/volonterro:frontend
    platform: linux/amd64
    build:
      context: frontend
      dockerfile: ./Dockerfile.development
    container_name: volonterro-frontend
    networks:
      - volonterro-network
    env_file: ./env/.env.development
    ports:
      - 3000:${FRONTEND_INTERNAL_PORT}
    volumes:
      - ./frontend/app:/app/app
    depends_on:
      backend:
        condition: service_started

  database:
    image: kalyonekenobe/volonterro:database
    build:
      context: .
      dockerfile_inline: |
        FROM postgres:latest
    container_name: volonterro-database
    networks:
      - volonterro-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:${DATABASE_PORT}
    expose:
      - ${DATABASE_PORT}
    volumes:
      - volonterro-database-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: on-failure

  nginx:
    image: kalyonekenobe/volonterro:nginx
    build:
      context: .
      dockerfile_inline: |
        FROM nginx:stable-alpine-perl
    container_name: volonterro-nginx
    networks:
      - volonterro-network
    env_file: ./env/.env.development
    ports:
      - 80:${NGINX_INTERNAL_PORT}
    expose:
      - ${NGINX_INTERNAL_PORT}
    volumes:
      - ./nginx/default.development.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_started
    healthcheck:
      test: ['CMD-SHELL', 'pgrep nginx > /dev/null || exit 1']
      interval: 10s
      timeout: 3s
      retries: 3
    restart: on-failure

networks:
  volonterro-network:
    driver: bridge

volumes:
  volonterro-database-data:
